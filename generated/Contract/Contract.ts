// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class UpdatedTokenInformation extends ethereum.Event {
  get params(): UpdatedTokenInformation__Params {
    return new UpdatedTokenInformation__Params(this);
  }
}

export class UpdatedTokenInformation__Params {
  _event: UpdatedTokenInformation;

  constructor(event: UpdatedTokenInformation) {
    this._event = event;
  }

  get newName(): string {
    return this._event.parameters[0].value.toString();
  }

  get newSymbol(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ClaimedTokens extends ethereum.Event {
  get params(): ClaimedTokens__Params {
    return new ClaimedTokens__Params(this);
  }
}

export class ClaimedTokens__Params {
  _event: ClaimedTokens;

  constructor(event: ClaimedTokens) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _controller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgrade extends ethereum.Event {
  get params(): Upgrade__Params {
    return new Upgrade__Params(this);
  }
}

export class Upgrade__Params {
  _event: Upgrade;

  constructor(event: Upgrade) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpgradeAgentSet extends ethereum.Event {
  get params(): UpgradeAgentSet__Params {
    return new UpgradeAgentSet__Params(this);
  }
}

export class UpgradeAgentSet__Params {
  _event: UpgradeAgentSet;

  constructor(event: UpgradeAgentSet) {
    this._event = event;
  }

  get agent(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MintingAgentChanged extends ethereum.Event {
  get params(): MintingAgentChanged__Params {
    return new MintingAgentChanged__Params(this);
  }
}

export class MintingAgentChanged__Params {
  _event: MintingAgentChanged;

  constructor(event: MintingAgentChanged) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get state(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__reservedTokensListResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  mintingFinished(): boolean {
    let result = super.call("mintingFinished", "mintingFinished():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintingFinished(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mintingFinished",
      "mintingFinished():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReservedPercentageUnit(addr: Address): BigInt {
    let result = super.call(
      "getReservedPercentageUnit",
      "getReservedPercentageUnit(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_getReservedPercentageUnit(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReservedPercentageUnit",
      "getReservedPercentageUnit(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minCap(): BigInt {
    let result = super.call("minCap", "minCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minCap", "minCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintAgents(param0: Address): boolean {
    let result = super.call("mintAgents", "mintAgents(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_mintAgents(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintAgents", "mintAgents(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getReservedPercentageDecimals(addr: Address): BigInt {
    let result = super.call(
      "getReservedPercentageDecimals",
      "getReservedPercentageDecimals(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_getReservedPercentageDecimals(
    addr: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReservedPercentageDecimals",
      "getReservedPercentageDecimals(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reservedTokensList(param0: Address): Contract__reservedTokensListResult {
    let result = super.call(
      "reservedTokensList",
      "reservedTokensList(address):(uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Contract__reservedTokensListResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBoolean()
    );
  }

  try_reservedTokensList(
    param0: Address
  ): ethereum.CallResult<Contract__reservedTokensListResult> {
    let result = super.tryCall(
      "reservedTokensList",
      "reservedTokensList(address):(uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__reservedTokensListResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBoolean()
      )
    );
  }

  upgradeAgent(): Address {
    let result = super.call("upgradeAgent", "upgradeAgent():(address)", []);

    return result[0].toAddress();
  }

  try_upgradeAgent(): ethereum.CallResult<Address> {
    let result = super.tryCall("upgradeAgent", "upgradeAgent():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upgradeMaster(): Address {
    let result = super.call("upgradeMaster", "upgradeMaster():(address)", []);

    return result[0].toAddress();
  }

  try_upgradeMaster(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "upgradeMaster",
      "upgradeMaster():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReservedTokens(addr: Address): BigInt {
    let result = super.call(
      "getReservedTokens",
      "getReservedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_getReservedTokens(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReservedTokens",
      "getReservedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reservedTokensDestinations(param0: BigInt): Address {
    let result = super.call(
      "reservedTokensDestinations",
      "reservedTokensDestinations(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_reservedTokensDestinations(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reservedTokensDestinations",
      "reservedTokensDestinations(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUpgradeState(): i32 {
    let result = super.call("getUpgradeState", "getUpgradeState():(uint8)", []);

    return result[0].toI32();
  }

  try_getUpgradeState(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getUpgradeState",
      "getUpgradeState():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  transferAgents(param0: Address): boolean {
    let result = super.call(
      "transferAgents",
      "transferAgents(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_transferAgents(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferAgents",
      "transferAgents(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isAddressReserved(addr: Address): boolean {
    let result = super.call(
      "isAddressReserved",
      "isAddressReserved(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBoolean();
  }

  try_isAddressReserved(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAddressReserved",
      "isAddressReserved(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  released(): boolean {
    let result = super.call("released", "released():(bool)", []);

    return result[0].toBoolean();
  }

  try_released(): ethereum.CallResult<boolean> {
    let result = super.tryCall("released", "released():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canUpgrade(): boolean {
    let result = super.call("canUpgrade", "canUpgrade():(bool)", []);

    return result[0].toBoolean();
  }

  try_canUpgrade(): ethereum.CallResult<boolean> {
    let result = super.tryCall("canUpgrade", "canUpgrade():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  areTokensDistributedForAddress(addr: Address): boolean {
    let result = super.call(
      "areTokensDistributedForAddress",
      "areTokensDistributedForAddress(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBoolean();
  }

  try_areTokensDistributedForAddress(
    addr: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "areTokensDistributedForAddress",
      "areTokensDistributedForAddress(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  reservedTokensDestinationsLen(): BigInt {
    let result = super.call(
      "reservedTokensDestinationsLen",
      "reservedTokensDestinationsLen():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reservedTokensDestinationsLen(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reservedTokensDestinationsLen",
      "reservedTokensDestinationsLen():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUpgraded(): BigInt {
    let result = super.call("totalUpgraded", "totalUpgraded():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalUpgraded(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUpgraded",
      "totalUpgraded():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  releaseAgent(): Address {
    let result = super.call("releaseAgent", "releaseAgent():(address)", []);

    return result[0].toAddress();
  }

  try_releaseAgent(): ethereum.CallResult<Address> {
    let result = super.tryCall("releaseAgent", "releaseAgent():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isToken(): boolean {
    let result = super.call("isToken", "isToken():(bool)", []);

    return result[0].toBoolean();
  }

  try_isToken(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isToken", "isToken():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class SetTransferAgentCall extends ethereum.Call {
  get inputs(): SetTransferAgentCall__Inputs {
    return new SetTransferAgentCall__Inputs(this);
  }

  get outputs(): SetTransferAgentCall__Outputs {
    return new SetTransferAgentCall__Outputs(this);
  }
}

export class SetTransferAgentCall__Inputs {
  _call: SetTransferAgentCall;

  constructor(call: SetTransferAgentCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetTransferAgentCall__Outputs {
  _call: SetTransferAgentCall;

  constructor(call: SetTransferAgentCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetReleaseAgentCall extends ethereum.Call {
  get inputs(): SetReleaseAgentCall__Inputs {
    return new SetReleaseAgentCall__Inputs(this);
  }

  get outputs(): SetReleaseAgentCall__Outputs {
    return new SetReleaseAgentCall__Outputs(this);
  }
}

export class SetReleaseAgentCall__Inputs {
  _call: SetReleaseAgentCall;

  constructor(call: SetReleaseAgentCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReleaseAgentCall__Outputs {
  _call: SetReleaseAgentCall;

  constructor(call: SetReleaseAgentCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class SetMintAgentCall extends ethereum.Call {
  get inputs(): SetMintAgentCall__Inputs {
    return new SetMintAgentCall__Inputs(this);
  }

  get outputs(): SetMintAgentCall__Outputs {
    return new SetMintAgentCall__Outputs(this);
  }
}

export class SetMintAgentCall__Inputs {
  _call: SetMintAgentCall;

  constructor(call: SetMintAgentCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetMintAgentCall__Outputs {
  _call: SetMintAgentCall;

  constructor(call: SetMintAgentCall) {
    this._call = call;
  }
}

export class UpgradeCall extends ethereum.Call {
  get inputs(): UpgradeCall__Inputs {
    return new UpgradeCall__Inputs(this);
  }

  get outputs(): UpgradeCall__Outputs {
    return new UpgradeCall__Outputs(this);
  }
}

export class UpgradeCall__Inputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpgradeCall__Outputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }
}

export class SetTokenInformationCall extends ethereum.Call {
  get inputs(): SetTokenInformationCall__Inputs {
    return new SetTokenInformationCall__Inputs(this);
  }

  get outputs(): SetTokenInformationCall__Outputs {
    return new SetTokenInformationCall__Outputs(this);
  }
}

export class SetTokenInformationCall__Inputs {
  _call: SetTokenInformationCall;

  constructor(call: SetTokenInformationCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenInformationCall__Outputs {
  _call: SetTokenInformationCall;

  constructor(call: SetTokenInformationCall) {
    this._call = call;
  }
}

export class ReleaseTokenTransferCall extends ethereum.Call {
  get inputs(): ReleaseTokenTransferCall__Inputs {
    return new ReleaseTokenTransferCall__Inputs(this);
  }

  get outputs(): ReleaseTokenTransferCall__Outputs {
    return new ReleaseTokenTransferCall__Outputs(this);
  }
}

export class ReleaseTokenTransferCall__Inputs {
  _call: ReleaseTokenTransferCall;

  constructor(call: ReleaseTokenTransferCall) {
    this._call = call;
  }
}

export class ReleaseTokenTransferCall__Outputs {
  _call: ReleaseTokenTransferCall;

  constructor(call: ReleaseTokenTransferCall) {
    this._call = call;
  }
}

export class FinalizeReservedAddressCall extends ethereum.Call {
  get inputs(): FinalizeReservedAddressCall__Inputs {
    return new FinalizeReservedAddressCall__Inputs(this);
  }

  get outputs(): FinalizeReservedAddressCall__Outputs {
    return new FinalizeReservedAddressCall__Outputs(this);
  }
}

export class FinalizeReservedAddressCall__Inputs {
  _call: FinalizeReservedAddressCall;

  constructor(call: FinalizeReservedAddressCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FinalizeReservedAddressCall__Outputs {
  _call: FinalizeReservedAddressCall;

  constructor(call: FinalizeReservedAddressCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetUpgradeAgentCall extends ethereum.Call {
  get inputs(): SetUpgradeAgentCall__Inputs {
    return new SetUpgradeAgentCall__Inputs(this);
  }

  get outputs(): SetUpgradeAgentCall__Outputs {
    return new SetUpgradeAgentCall__Outputs(this);
  }
}

export class SetUpgradeAgentCall__Inputs {
  _call: SetUpgradeAgentCall;

  constructor(call: SetUpgradeAgentCall) {
    this._call = call;
  }

  get agent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUpgradeAgentCall__Outputs {
  _call: SetUpgradeAgentCall;

  constructor(call: SetUpgradeAgentCall) {
    this._call = call;
  }
}

export class ClaimTokensCall extends ethereum.Call {
  get inputs(): ClaimTokensCall__Inputs {
    return new ClaimTokensCall__Inputs(this);
  }

  get outputs(): ClaimTokensCall__Outputs {
    return new ClaimTokensCall__Outputs(this);
  }
}

export class ClaimTokensCall__Inputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimTokensCall__Outputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class SetReservedTokensListMultipleCall extends ethereum.Call {
  get inputs(): SetReservedTokensListMultipleCall__Inputs {
    return new SetReservedTokensListMultipleCall__Inputs(this);
  }

  get outputs(): SetReservedTokensListMultipleCall__Outputs {
    return new SetReservedTokensListMultipleCall__Outputs(this);
  }
}

export class SetReservedTokensListMultipleCall__Inputs {
  _call: SetReservedTokensListMultipleCall;

  constructor(call: SetReservedTokensListMultipleCall) {
    this._call = call;
  }

  get addrs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get inTokens(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get inPercentageUnit(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get inPercentageDecimals(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class SetReservedTokensListMultipleCall__Outputs {
  _call: SetReservedTokensListMultipleCall;

  constructor(call: SetReservedTokensListMultipleCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetUpgradeMasterCall extends ethereum.Call {
  get inputs(): SetUpgradeMasterCall__Inputs {
    return new SetUpgradeMasterCall__Inputs(this);
  }

  get outputs(): SetUpgradeMasterCall__Outputs {
    return new SetUpgradeMasterCall__Outputs(this);
  }
}

export class SetUpgradeMasterCall__Inputs {
  _call: SetUpgradeMasterCall;

  constructor(call: SetUpgradeMasterCall) {
    this._call = call;
  }

  get master(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUpgradeMasterCall__Outputs {
  _call: SetUpgradeMasterCall;

  constructor(call: SetUpgradeMasterCall) {
    this._call = call;
  }
}
